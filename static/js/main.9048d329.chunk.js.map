{"version":3,"sources":["components/HomePage.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["HomePage","PeoplePage","match","location","history","useState","people","setPeople","personName","params","searchParams","URLSearchParams","search","query","setQuery","useEffect","fetch","then","res","json","queryFromUrl","get","pattern","RegExp","visiblePeople","filter","p","test","name","sortField","setSortField","ascending","setAscending","length","some","push","pathname","visiblePeopleSorted","sort","a","b","localeCompare","columns","className","map","columnName","onClick","person","index","key","classnames","person__woman","sex","person__man","colName","Nav","to","exact","activeClassName","App","useHistory","useLocation","path","type","value","onChange","event","target","component","from","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9048d329.chunk.js","sourcesContent":["import React from 'react';\n\n const HomePage = () => (<h1> Home Page</h1>);\n\n export default HomePage;\n","import React, { useEffect, useState } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport classnames from 'classnames';\n\nconst getPeople = (): Promise<Person[]> => {\n  return fetch('./api/people.json')\n    .then(res => res.json());\n}\n\ntype Props = RouteComponentProps<{ personName: string;}>;\n\nconst PeoplePage: React.FC<Props> = ({ match, location, history }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const { personName } = match.params;\n  const searchParams = new URLSearchParams(location.search)\n\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getPeople().then(setPeople)\n  }, []);\n  const queryFromUrl: string = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setQuery(query);\n  }, [queryFromUrl]);\n\n  const pattern = new RegExp(queryFromUrl, 'i');\n  const visiblePeople = people\n    .filter(p => pattern.test(p.name))\n\n  //const visiblePeopleSorted = [...visiblePeople];\n  const [sortField, setSortField] = useState('born');\n  const [ascending, setAscending] = useState(true);\n\n  if (people.length === 0) {\n    return <p>Loading...</p>;\n  }\n  if (personName && !people.some(p => p.name === personName)) {\n    history.push({\n      pathname: '/people'\n    });\n  }\n\n  let visiblePeopleSorted = visiblePeople.sort(\n    (a, b) => {\n      let _type = typeof a[sortField as keyof Person];\n      let res = 0;\n      switch (_type) {\n        case 'number':\n          res = (a[sortField as keyof Person] as number) - (b[sortField as keyof Person] as number);\n          return ascending ? res : -1 * res;\n        case 'string':\n          res = (a[sortField as keyof Person] as string).localeCompare(b[sortField as keyof Person] as string);\n          return ascending ? res : -1 * res;\n        default:\n          return res;\n      }\n    }\n  );\n\n  let columns = ['name', 'sex', 'born', 'died', 'motherName', 'fatherName', 'slug'];\n\n  return (\n    <div className=\"PeoplePage\">\n      <h1> People table\n      </h1>\n      <table>\n        <thead>\n          <tr>\n            <th className=\"table__head\">Row â„–</th>\n            {columns.map(columnName => (\n              <th\n                className=\"table__head\"\n                onClick={() => {\n                  setAscending(columnName === sortField && !ascending);\n                  setSortField(columnName);\n                  history.push({\n                    search: `sortBy=${columnName}&ascending=${ascending}`\n                  })\n                }}\n              >\n                {columnName}&nbsp;{(columnName === sortField ? ascending ? \"\\u07E1\" : \"\\u07DC\" : '')}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {visiblePeopleSorted.map((person: Person, index) => {\n            return (\n              <tr key={index}\n                className={classnames({\n                  person__woman: person.sex === 'f',\n                  person__man: person.sex === 'm',\n                })}\n                onClick={() => {\n                  history.push({\n                    pathname: `/people/${person.name}`,\n                  });\n                }\n                }\n              >\n                <td>{index + 1}</td>\n                {\n                  columns.map((colName) =>\n                    (<td\n                      className={classnames({\n                        'Person': true,\n                        'Person--active': personName === person.name,\n                      })}\n                    >\n                      {person[colName as keyof Person]}\n                    </td>\n                    ))}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default PeoplePage;\n\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\n\nimport HomePage from './components/HomePage';\nimport PeoplePage from './components/PeoplePage';\nimport './App.css';\n//import debounce from 'lodash.debounce';\n\n\nconst App = () => {\n  // const [applliedQuery, setAppliedQuery] = useState('');\n  //const [query, setQuery] = useState('');\n  //const [filterQuery, setFilterQuery] = useState('');\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search)\n  const query: string = searchParams.get('query') || '';\n\n  //const searchQueryWithDebounce = useCallback(debounce(history.push, 1000), []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header__wrapper\">\n        <header className='App__header'>\n          <Nav />\n          <Route path=\"/people\">\n            <input\n              type=\"text\"\n              value={query}\n              onChange={(event) => {\n                // searchQueryWithDebounce({\n                //   search: `?query=${event.target.value}`\n                // })\n                history.push({\n                  search: `?query=${event.target.value}`\n                })\n              }} />\n          </Route>\n        </header>\n      </div>\n\n      <Switch>\n        <Route path=\"/\" exact component={HomePage}></Route>\n        <Route path=\"/people/:personName?\" component={PeoplePage}></Route>\n        <h1>Page not found</h1>\n        <Redirect from='/home' to='/' />\n      </Switch>\n    </div>\n  )\n};\n\nconst Nav = () => (\n  <nav className=\"Nav\">\n    <ul className=\"Nav__list\">\n      <li className=\"Nav__item\">\n        <NavLink to=\"/\"\n          className=\"Nav__link\"\n          exact\n          activeClassName=\"Nav__link--active\"\n        >\n          Home</NavLink>\n      </li>\n      <li className=\"Nav__item\">\n        <NavLink to=\"/people\"\n          className=\"Nav__link\"\n          activeClassName=\"Nav__link--active\"\n        >People</NavLink>\n      </li>\n    </ul>\n  </nav>\n)\n\n\nexport default App;\n\n\n{/* <input\n            type=\"text\"\n            value={query}\n            onChange={(event) => {\n              history.push({\n                search: `?query=${event.target.value}`\n              })\n            }} /> */}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}